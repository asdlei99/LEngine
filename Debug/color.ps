////////////////////////////////////////////////////////////////////////////////
// Filename: color.ps
////////////////////////////////////////////////////////////////////////////////

Texture2D shaderTexture[2];
SamplerState SampleType;

cbuffer LightingBuffer
{
	float3 direction;
	float padding;
};

//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex: TEXCOORD0;
	float3 normal : NORMAL;
	float3 viewDirection : TEXCOORD1;
	float3 tangent : TANGENT;
    float3 binormal : BINORMAL;
};

////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 ColorPixelShader(PixelInputType input) : SV_TARGET
{
	float4 textureColor;
	float4 normalMap;
	float3 normalFromTexture;
	float lightIntensity;
	float3 reflectionVector;
	float3 viewDir;
	float specular;
	float3 lightDir = normalize(direction);
	float specularPower = 5.0;
	float specularStrength = 0.5;
	float4 color;

	textureColor = shaderTexture[0].Sample(SampleType, input.tex);
	normalMap = shaderTexture[1].Sample(SampleType, input.tex);
	
	//From [0, 1] to [-1, 1]
	normalMap = (normalMap * 2.0f) - 1.0f;

	normalFromTexture = (normalMap.x * input.tangent) + (normalMap.y * input.binormal) + (normalMap.z * input.normal);
	normalFromTexture = normalize(normalFromTexture);

	lightIntensity = saturate(dot(normalFromTexture, lightDir));	

	reflectionVector = normalize(-lightDir + 2 * input.normal * lightIntensity);
	specular = pow(saturate(dot(reflectionVector, input.viewDirection)), specularPower) * specularStrength;
	textureColor *= (lightIntensity + specular);

	color = saturate(textureColor);
	return color;
	//return float4(specular, specular, specular, 1.0);
	//return float4(1.0, 1.0, 1.0, 1.0);
}