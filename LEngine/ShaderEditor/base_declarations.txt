
#define NUM_LIGHTS_DIRECTIONAL 1
#define NUM_LIGHTS_POINT 8
cbuffer LightingBuffer
{
#if NUM_LIGHTS_DIRECTIONAL > 0
	float4 g_directionalLightDirectionStrength[NUM_LIGHTS_DIRECTIONAL];
	float4 g_directionalLightColor[NUM_LIGHTS_DIRECTIONAL];
#endif
};

cbuffer PointLightBuffer
{
#if NUM_LIGHTS_POINT > 0
	float4 g_pointLightPositionWithRadius[NUM_LIGHTS_POINT];
	float4 g_pointLightColorWithStrength[NUM_LIGHTS_POINT];
#endif
};

cbuffer PBRBuffer
{
	float g_roughness;
	float g_metalness;
	float g_roughnessLOD;
	float g_paddingPBR;
	float4 g_albedoTint;
};

cbuffer ShaderTextureBuffer
{
	int g_hasNormalMap;
	int g_hasRoughnessMap;
	int g_hasMetalnessMap;
	int g_hasAlbedoMap;
};

//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex: TEXCOORD0;
	float3 normal : NORMAL;
	float3 viewDirection : TEXCOORD1;
	float3 tangent : TANGENT;
    float3 binormal : BINORMAL;
	float3 diffuseLookUp : TEXCOORD2;
};

//////////////
// CLASSES //
//////////////
float3 GetNormalValue(float3 normalMap, float3 tangent, float3 binormal, float3 normal);
float GetRoughness();
float GetMetalness();
float3 GetNormal();
float4 GetBaseColor();

float GeometrySchlickGGX(float NdotV, float k);
float GeometrySmithGGX(float roughness, float NdotV, float NdotL);
float NormalDistributionFunction(float3 halfV, float roughness, float PI, float NdotH);
float FresnelSchlick(float3 F0, float3 albedo, float metalness, float NdotV, float exp);
float3 FresnelSchlickRoughness(float NdotV, float3 F0, float roughness);

float3 GetPrefilteredColor(float roughness, float3 R);

//////////////////
// CONST VALUES //
//////////////////
static const float PI = 3.14159265359;
//Point light const values
static const float POINT_LIGHT_CONSTANT = 1.0f;
static const float POINT_LIGHT_LINEAR = 0.7f;
static const float POINT_LIGHT_QUADRATIC = 1.8f;
