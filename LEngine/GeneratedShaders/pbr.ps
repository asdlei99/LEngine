////////////////////////////////////////////////////////////////////////////////
// Filename: pbr_used.ps
////////////////////////////////////////////////////////////////////////////////

/////////////
// GLOBALS //
/////////////
TextureCube irradianceMap : register(t0);
Texture2D specularLUT : register(t1);
TextureCube environmentMap_1 : register(t2);
TextureCube environmentMap_2 : register(t3);
TextureCube environmentMap_3 : register(t4);
TextureCube environmentMap_4 : register(t5);
TextureCube environmentMap_5 : register(t6);
SamplerState SampleType : register(s0);
Texture2D additionalTexture_0 : register(t7);
static float4 tex_0;
Texture2D additionalTexture_1 : register(t8);
static float4 tex_1;
Texture2D additionalTexture_2 : register(t9);
static float4 tex_2;
Texture2D additionalTexture_3 : register(t10);
static float4 tex_3;

#define NUM_LIGHTS_DIRECTIONAL 1
#define NUM_LIGHTS_POINT 0
cbuffer LightingBuffer
{
	float4 g_directionalLightDirectionStrength[NUM_LIGHTS_DIRECTIONAL];
	float4 g_directionalLightColor[NUM_LIGHTS_DIRECTIONAL];
#if NUM_LIGHTS_POINT > 0
	float4 g_pointLightPositionWithRadius[NUM_LIGHTS_POINT];
	float4 g_pointLightColorWithStrength[NUM_LIGHTS_POINT];
#endif
};

cbuffer PBRBuffer
{
	float g_roughness;
	float g_metalness;
	float g_roughnessLOD;
	float g_paddingPBR;
	float4 g_albedoTint;
};

cbuffer ShaderTextureBuffer
{
	int g_hasNormalMap;
	int g_hasRoughnessMap;
	int g_hasMetalnessMap;
	int g_hasAlbedoMap;
};

//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex: TEXCOORD0;
	float3 normal : NORMAL;
	float3 viewDirection : TEXCOORD1;
	float3 tangent : TANGENT;
    float3 binormal : BINORMAL;
	float3 diffuseLookUp : TEXCOORD2;
};

//////////////
// CLASSES //
//////////////
float3 GetNormalValue(float3 normalMap, float3 tangent, float3 binormal, float3 normal);
float GetRoughness();
float GetMetalness();
float3 GetNormal();
float4 GetBaseColor();

float GeometrySchlickGGX(float NdotV, float k);
float GeometrySmithGGX(float roughness, float NdotV, float NdotL);
float NormalDistributionFunction(float3 halfV, float roughness, float PI, float NdotH);
float FresnelSchlick(float3 F0, float3 albedo, float metalness, float NdotV, float exp);
float3 FresnelSchlickRoughness(float NdotV, float3 F0, float roughness);

float3 GetPrefilteredColor(float roughness, float3 R);

//////////////////
// CONST VALUES //
//////////////////
static const float PI = 3.14159265359;
//Point light const values
static const float POINT_LIGHT_CONSTANT = 1.0f;
static const float POINT_LIGHT_LINEAR = 0.7f;
static const float POINT_LIGHT_QUADRATIC = 1.8f;
float add(float a, float b);
float divide(float a, float b);
float fresnel(float4 F0, float4 albedo, float metalness, float NdotV, float exp);
float get_x(float4 a);
float multiply(float a, float b);
float substract(float a, float b);

////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 ColorPixelShader(PixelInputType input) : SV_TARGET
{
	tex_0 = additionalTexture_0.Sample(SampleType, input.tex);
	tex_1 = additionalTexture_1.Sample(SampleType, input.tex);
	tex_2 = additionalTexture_2.Sample(SampleType, input.tex);
	tex_3 = additionalTexture_3.Sample(SampleType, input.tex);

//Calculated values
	float specular;
	float3 normal;
	float lightIntensity;
	float3 lightDir;
	float4 normalMap;
	float roughnessMap;
	float metalnessMap;
	float accumulatedLightStrength = 0;

//PBR parameters
	float roughness;
	float metalness;
	float3 albedo;

//Load texture data
	//albedo = shaderTexture[0].Sample(SampleType, input.tex);
	//normalMap = shaderTexture[1].Sample(SampleType, input.tex);
	//roughnessMap = shaderTexture[2].Sample(SampleType, input.tex);
	//metalnessMap = shaderTexture[3].Sample(SampleType, input.tex);

//Calculate normal for model
	normal = GetNormalValue(GetNormal(), input.tangent, input.binormal, input.normal);

//Calculate other PBR values
	roughness = GetRoughness();
	metalness = GetMetalness();

//GAMMA CORRECTION
	albedo = GetBaseColor();
	albedo = albedo / (albedo + float3(1.0, 1.0, 1.0));
	albedo = pow(albedo, float3(1.0/2.2, 1.0/2.2, 1.0/2.2)); 

//SPECULAR IBL	
	float NdotV = max(dot(normal, input.viewDirection), 0.0);
	float3 R = reflect(-input.viewDirection, input.normal);
	float3 prefilteredColor = GetPrefilteredColor(roughness, R);
	float2 enviroBRDF = specularLUT.Sample(SampleType, float2(max(NdotV, 0.0f), max(NdotV, 0.0f))).rg;

//FRESNEL EQUATION
	float3 F0 = float3(0.04, 0.04, 0.04);
	float F = FresnelSchlick(F0, albedo, metalness, NdotV, 5.0);
	F0 = lerp(F0, albedo, metalness);
//////////////////
//DIFFUSE IRRADIANCE
	float3 irradiance = irradianceMap.Sample(SampleType, GetNormalValue(GetNormal(), input.tangent, input.binormal, input.diffuseLookUp)).rgb;
	float3 diffuse = irradiance * albedo;
	//float3 ambient = 0.03 * albedo;

	float3 kS = FresnelSchlickRoughness(max(NdotV, 0.0), F0, roughness);
	float3 kD = float3(1.0, 1.0, 1.0) - kS;
	kD *= (1.0 - metalness);

//AMBIENT CALCULATIONS
	specular =  prefilteredColor * (kS * enviroBRDF.x + enviroBRDF.y);
	float3 ambient = (kD * diffuse + specular);// * ao;

//MULTIPLE DIRECTIONAL LIGHT PASS
	float4 finalColor = float4(ambient, 1.0f); //Base of output color is ambient lighting

	for (int i = 0; i < NUM_LIGHTS_DIRECTIONAL; i++)
		accumulatedLightStrength += g_directionalLightDirectionStrength[i].w;

	for (int i = 0; i < NUM_LIGHTS_DIRECTIONAL; i++) //Iterate over number of directional lights
	{
		lightDir = normalize(g_directionalLightDirectionStrength[i].xyz);
		lightIntensity = saturate(dot(normal, lightDir));	

	//Calculate multiple dot products
		float3 halfV = (input.viewDirection + lightDir) / (length(lightDir + input.viewDirection));
		float NdotH = max(dot(normal, halfV), 0.0);
		float NdotL = max(dot(normal, lightDir), 0.0);

	//NORMAL DISTRUBUTION FUNCTION
		float D = NormalDistributionFunction(halfV, roughness, PI, NdotH);
	//GEOMETRY FUNCTION
		float G = GeometrySmithGGX(roughness, NdotV, NdotL);

	//FINAL CALCULATIONS
		float3 numerator = D * G * F;
		float denominator = 4.0 * max(NdotV, 0.0) * max(NdotL, 0.0);
		specular = numerator / max(denominator, 0.001);

		float3 tint = float3(1.0, 0.0, 0.0);
		//albedo *= lerp(float3(1.0, 1.0, 1.0), tint, metalness);

		float currentLightStrength = g_directionalLightDirectionStrength[i].w;
		float lightPercentage = 1.0f;//currentLightStrength / accumulatedLightStrength;
		float3 Lo = (kD * albedo / PI + specular) * NdotL * lightPercentage * g_directionalLightColor[i].xyz;

		finalColor += float4(Lo, 1.0f);
		//finalColor += float4(ambient + Lo, 1.0f);
	}
	//finalColor = saturate(finalColor);

//MULTIPLE POINT LIGHT PASS
	accumulatedLightStrength = 0.0f;
	float4 pointLight;
#if NUM_LIGHTS_POINT > 0
	for (int i = 0; i < NUM_LIGHTS_POINT; i++)
		accumulatedLightStrength += g_pointLightColorWithStrength[i].w;

	for (int i = 0; i < NUM_LIGHTS_POINT; i++) //Iterate over number of point lights
	{
		float distance = length(input.position.z - g_pointLightPositionWithRadius[i].z);
		//distance = 1.0f;
		lightDir = normalize(input.position.z - g_pointLightPositionWithRadius[i].z);
		lightIntensity = 1.0f / (POINT_LIGHT_CONSTANT + POINT_LIGHT_LINEAR * distance + POINT_LIGHT_QUADRATIC * distance * distance);

	//Calculate multiple dot products
		float3 halfV = (input.viewDirection + lightDir) / (length(lightDir + input.viewDirection));
		float NdotH = max(dot(normal, halfV), 0.0);
		float NdotL = max(dot(normal, lightDir), 0.0);

	//NORMAL DISTRUBUTION FUNCTION
		float D = NormalDistributionFunction(halfV, roughness, PI, NdotH);
	//GEOMETRY FUNCTION
		float G = GeometrySmithGGX(roughness, NdotV, NdotL);

	//FINAL CALCULATIONS
		float3 numerator = D * G * F;
		float denominator = 4.0 * max(NdotV, 0.0) * max(NdotL, 0.0);
		specular = numerator / max(denominator, 0.001);

		float3 Lo = NdotL * lightIntensity * g_pointLightColorWithStrength[i].w * g_pointLightColorWithStrength[i].xyz;
		finalColor += float4(Lo, 1.0f);
	}
	//finalColor += normalize(pointLight);
#endif
	
	//finalColor = float4(g_directionalLightDirectionStrength[0].w, 0.0f, 0.0f, 1.0f);
	//return saturate(finalColor);// * lightIntensity;
	return finalColor * g_albedoTint;// * lightIntensity;

	//return float4(kD * diffuse + specular, 1.0f) * g_lightStrength;//*lightIntensity;
	//return float4(ambient, 1.0);
}

float GeometrySchlickGGX(float NdotV, float k)
{
    float nom   = NdotV;
    float denom = NdotV * (1.0 - k) + k;
	
    return nom / denom;
}

float NormalDistributionFunction(float3 halfV, float roughness, float PI, float NdotH)
{
	float a2 = max(roughness * roughness, 0.001);
	float denom = 1.0 + NdotH * NdotH * (a2 - 1.0);
	denom = denom * denom;
	denom = denom * PI;
	
	return a2 / denom;
}

float GeometrySmithGGX(float roughness, float NdotV, float NdotL)
{
	float k = (roughness + 1);
	k = (k * k) / 8;
    float ggx1 = GeometrySchlickGGX(NdotV, k);
    float ggx2 = GeometrySchlickGGX(NdotL, k);

	return ggx1 * ggx2;
}

float FresnelSchlick(float3 F0, float3 albedo, float metalness, float NdotV, float exp)
{
	F0 = lerp(F0, albedo, metalness);

	return F0 + (1.0 - F0) * pow((1.0 - NdotV), exp);
}

float3 FresnelSchlickRoughness(float NdotV, float3 F0, float roughness)
{
    return F0 + (max(float3(1.0 - roughness, 1.0 - roughness, 1.0 - roughness), F0) - F0) * pow(1.0 - NdotV, 5.0);
}   

////////////////////////////////////////////////////////////////////////////////
// GET TEXTURE PBR VALUES
////////////////////////////////////////////////////////////////////////////////
float3 GetNormalValue(float3 normalMap, float3 tangent, float3 binormal, float3 normal)
{
	normalMap = (normalMap * 2.0f) - 1.0f; //Convert from [0, 1] to [-1, 1]
	normal = (normalMap.x * tangent) + (normalMap.y * binormal) + (normalMap.z * normal);
	return normalize(normal);
}

////////////////////////////////////////////////////////////
// OTHER CALCULATIONS
////////////////////////////////////////////////////////////
float3 GetPrefilteredColor(float roughness, float3 R)
{
	float3 color_0 = environmentMap_1.Sample(SampleType, R);
	float3 color_1 = environmentMap_2.Sample(SampleType, R);
	float3 color_2 = environmentMap_3.Sample(SampleType, R);
	float3 color_3 = environmentMap_4.Sample(SampleType, R);
	float3 color_4 = environmentMap_5.Sample(SampleType, R);

	float3 colors[5] = {color_0, color_1, color_2, color_3, color_4};
	int index = clamp(roughness * 5, 0, 4);
	float lerpVal = (roughness - index * 0.2f) / ((index + 1) * 0.2f - index * 0.2f);
	lerpVal = clamp(lerpVal, 0.0f, 1.0f);

	return lerp(colors[index], colors[clamp(index + 1, 0, 4)], lerpVal);
}

////////////////////////////////////////////////////////////////////////////////
// SHADER EDITOR METHODS
////////////////////////////////////////////////////////////////////////////////
float add(float a, float b)
{
	return a + b;
}

float2 add(float2 a, float2 b)
{
	return a + b;
}

float3 add(float3 a, float3 b)
{
	return a + b;
}

float4 add(float4 a, float4 b)
{
	return a + b;
}
float divide(float a, float b)
{
	return a / b;
}




float fresnel(float4 F0, float4 albedo, float metalness, float NdotV, float exp)
{
	F0 = lerp(F0, albedo, metalness);

	return F0 + (1.0 - F0) * pow((1.0 - NdotV), exp);
}
float get_x(float4 a)
{
	return a.r;
}
float multiply(float a, float b)
{
	return a * b;
}
float substract(float a, float b)
{
	return a - b;
}


////////////////////////////////////////////////////////////////////////////////
// SHADER EDITOR METHODS
////////////////////////////////////////////////////////////////////////////////
float4 GetBaseColor()
{
	return tex_0;
}
float GetMetalness()
{
	float out_4 = get_x(tex_1);

	return out_4;
}
float GetRoughness()
{
	float out_5 = get_x(tex_2);

	return out_5;
}
float3 GetNormal()
{
	return tex_3;
}
