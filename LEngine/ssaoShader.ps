////////////////////////////////////////////////////////////////////////////////
// Filename: ssaoShader.ps
////////////////////////////////////////////////////////////////////////////////

Texture2D textures[3]; //position, normal, noise
SamplerState SampleType;

//////////////
// TYPEDEFS //
//////////////

cbuffer KernelBuffer
{
	float3 g_kernelValue[64];
};

struct PixelInputType
{
    float4 positionSV : SV_POSITION;
    float2 tex : TEXCOORD0;
	float4x4 projection : TEXCOORD1;
};

const float2 noiseScale = float2(1280.0f / 4.0f, 720.0f / 4.0f);
const float radius = 0.5f;
const float bias = 0.025f;
////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 ColorPixelShader(PixelInputType input) : SV_TARGET
{
	float3 position = textures[0].Sample(SampleType, input.tex).xyz; 
	float3 normal = normalize(textures[1].Sample(SampleType, input.tex).rgb); 
	float3 randomVector = normalize(float3(textures[2].Sample(SampleType, input.tex * noiseScale).xy, 0.0f));
	//float3 randomVector = normalize(textures[2].Sample(SampleType, input.tex * noiseScale).xyz);

	float3 tangent = normalize(randomVector - normal * dot(randomVector, normal));
	float3 bitangent = cross(tangent, normal);
	float3x3 TBN = {tangent, bitangent, normal};

	float3 sample = float3(0.0f, 0.0f, 0.0f);
	float4 offset = float4(0.0f, 0.0f, 0.0f, 0.0f);
	float occlusion = 0.0f;

	for (int i = 0; i < 64; i++)
	{
		sample = mul(g_kernelValue[i], TBN);
		sample = position + sample * radius;

		offset = float4(sample, 1.0f);
		offset = mul(input.projection, offset);
		offset.xyz /= offset.w;
		offset.xyz = offset.xyz * 0.5f + 0.5f;
		
		float sampleDepth = textures[0].Sample(SampleType, offset.xy).z;
		occlusion += (sampleDepth >= sample.z + bias ? 1.0 : 0.0);
	}
	occlusion = 1.0f - (occlusion / 64.0f);
	
	//float4 color = float4(position.x, position.y, position.z, 1.0f);
	//return color;
	//return float4(bitangent, 1.0f);
	return float4(occlusion, occlusion, occlusion, 1.0f);
}