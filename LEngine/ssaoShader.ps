////////////////////////////////////////////////////////////////////////////////
// Filename: ssaoShader.ps
////////////////////////////////////////////////////////////////////////////////

Texture2D textures[3]; //position, normal, noise
SamplerState SampleType;

//////////////
// TYPEDEFS //
//////////////

cbuffer KernelBuffer
{
	float3 g_kernelValue[64];
};

struct PixelInputType
{
    float4 positionSV : SV_POSITION;
    float2 tex : TEXCOORD0;
	float4x4 projection : TEXCOORD1;
};

const float2 noiseScale = float2(1280.0f / 4.0f, 720.0f / 4.0f);
const float radius = 0.5f;
const float bias = 0.025f;
////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 ColorPixelShader(PixelInputType input) : SV_TARGET
{
	float3 position = textures[0].Sample(SampleType, input.tex); 
	float3 normal = normalize(textures[1].Sample(SampleType, input.tex)); 
	float3 randomVector = normalize(textures[2].Sample(SampleType, input.tex * noiseScale));

	float3 tangent = normalize(randomVector - normal * dot(randomVector, normal));
	float3 bitangent = cross(normal, tangent);
	float3x3 TBN = {tangent, bitangent, normal};

	float occlusion = 0.0f;
	for (int i = 0; i < 64; i++)
	{
		float3 sample = mul(TBN, g_kernelValue[i]); //From tangent to view-space
		sample = position + sample * radius;

		float4 offset = float4(sample, 1.0f);
		offset = mul(input.projection, offset);
		offset.xyz /= offset.w;
		offset.xyz = offset.xyz * 0.5f + 0.5f;

		float sampleDepth = textures[0].Sample(SampleType, offset.xy).z;

		float rangeCheck = smoothstep(0.0f, 1.0f, radius / abs(position.z - sampleDepth));
		occlusion += (sampleDepth >= sample.z + bias ? 1.0 : 0.0) * rangeCheck;
	}
	occlusion = 1.0 - (occlusion / 64.0f);
	//occlusion = 1.0f - occlusion;
	//return float4(sampleDepth, sampleDepth, sampleDepth, 1.0f);
	//return float4(occlusion, occlusion, occlusion, 1.0f);
	return float4(normal, 1.0f);
}