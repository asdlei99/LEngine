////////////////////////////////////////////////////////////////////////////////
// Filename: skybox.ps
////////////////////////////////////////////////////////////////////////////////

Texture2D shadowMap;
SamplerState SampleType;

//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
	float4 lightViewPosition : TEXCOORD0;
	float3 lightPos : TEXCOORD1;
	float3 normal : NORMAL;
};

////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 ColorPixelShader(PixelInputType input) : SV_TARGET
{
	float4 color = float4(0.0, 0.0, 0.0, 1.0);
	float lightDepthValue;
	float2 tex;
	float depthValue;
	float bias = 0.001f;
	float4 textureColor = float4(0.5, 0.0, 0.0, 1.0);
	float4 ambientColor = float4(0.1, 0.1, 0.1, 1.0);

	color = ambientColor;

	tex.x = input.lightViewPosition.x / input.lightViewPosition.w / 2.0f + 0.5f;
	tex.y = -input.lightViewPosition.y / input.lightViewPosition.w / 2.0f + 0.5f;

	if((saturate(tex.x) == tex.x) && (saturate(tex.y) == tex.y))
	{
		depthValue = shadowMap.Sample(SampleType, tex).r;

		lightDepthValue = input.lightViewPosition.z / input.lightViewPosition.w;
		lightDepthValue = lightDepthValue - bias;

		if (lightDepthValue < depthValue)
		{
			float lightIntensity = saturate(dot(input.normal, input.lightPos));
			if (lightIntensity > 0.0f)
			{
				color += textureColor;
				color = saturate(color);
			}
		}
	}
	
	//return float4(lightDepthValue, lightDepthValue, lightDepthValue, 1.0f);
	//return float4(depthValue, depthValue, depthValue, 1.0f);
	return float4(1.0, 1.0, 1.0, 1.0);
	//return color;
}