////////////////////////////////////////////////////////////////////////////////
// Filename: skybox.ps
////////////////////////////////////////////////////////////////////////////////

Texture2D shadowMap;
SamplerState SampleType;

//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
	float4 lightViewPosition : TEXCOORD0;
	float3 lightPos : TEXCOORD1;
	float3 normal : NORMAL;
	float4 positionWorld : TEXCOORD2;
};

////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 ColorPixelShader(PixelInputType input) : SV_TARGET
{
	float4 color = float4(0.0, 0.0, 0.0, 1.0);
    float depthValue;
    float lightDepthValue;
    float bias = 0.001f;
    float4 textureColor = float4(1.0, 1.0, 1.0, 1.0);
    float4 ambientColor = float4(0, 0, 0, 1.0);
    float2 tex;
    float lightIntensity = 0.0f;
	float modelDepthValue;

    input.lightViewPosition.xyz /= input.lightViewPosition.w;

    tex.x = input.lightViewPosition.x / 2.0f + 0.5f;
    tex.y = -input.lightViewPosition.y / 2.0f + 0.5f;

    depthValue = shadowMap.Sample(SampleType, tex).r;
    color = float4(depthValue, depthValue, depthValue, 1.0f);

	input.positionWorld.xyz /= input.positionWorld.w;
	tex.x = input.positionWorld.x / 2.0f + 0.5f;
    tex.y = -input.positionWorld.y / 2.0f + 0.5f;
	modelDepthValue = shadowMap.Sample(SampleType, tex).r;

    lightDepthValue = input.lightViewPosition.z;// / input.lightViewPosition.w;
	lightDepthValue = lightDepthValue - bias;
    [branch] if(lightDepthValue < depthValue)
    {
        lightIntensity = saturate(dot(input.normal, input.lightPos));

        if(lightIntensity > 0.0f)
        {
            // Determine the final diffuse color based on the diffuse color and the amount of light intensity.
			color += (ambientColor * lightIntensity);

            // Saturate the final light color.
            color = saturate(color);
        }
    }
	float shadow = lightDepthValue > depthValue ? 1.0f : 0.0f;

	//return float4(shadow, shadow, shadow, 1.0f);
	//return float4(lightDepthValue, lightDepthValue, lightDepthValue, 1.0f);
	//return float4(lightInverted, lightInverted, lightInverted, 1.0f);
	//return float4(modelDepthValue, modelDepthValue, modelDepthValue, 1.0f);
	//return float4(input.lightViewPosition.xyz, 1.0f);
	//return input.positionWorld;
	//color = color + float4(0.3, 0.3, 0.3, 0.0);
	return color;

	/*
	float2 tex;
	input.lightViewPosition.xyz /= input.lightViewPosition.w;

    tex.x = input.lightViewPosition.x / 2.0f + 0.5f;
    tex.y = -input.lightViewPosition.y / 2.0f + 0.5f;

	float shadow = shadowMap.Sample(SampleType, tex).r;
	float depth = input.position.z;

	input.positionWorld.xyz /= input.positionWorld.w;
	tex.x = input.positionWorld.x / 2.0f + 0.5f;
    tex.y = -input.positionWorld.y / 2.0f + 0.5f;
	float modelDepthValue = shadowMap.Sample(SampleType, tex).r;

	shadow = (depth > shadow) ? 0.55f : 1.0f;
	//shadow = (depth < shadow && modelDepthValue < shadow) ? 0.55f : 1.0f;

	return float4(shadow, shadow, shadow, 1.0f);
	*/
}