////////////////////////////////////////////////////////////////////////////////
// Filename: pbr_base.ps
////////////////////////////////////////////////////////////////////////////////

/////////////
// GLOBALS //
/////////////
Texture2D shaderTexture[4];
TextureCube irradianceMap;
Texture2D specularLUT;
TextureCube environmentMap[5];
SamplerState SampleType;

cbuffer LightingBuffer
{
	float3 g_direction;
	float g_lightStrength;
};

cbuffer PBRBuffer
{
	float g_roughness;
	float g_metalness;
	float g_roughnessLOD;
	float g_paddingPBR;
};

cbuffer ShaderTextureBuffer
{
	int g_hasNormalMap;
	int g_hasRoughnessMap;
	int g_hasMetalnessMap;
	int g_paddingShaderTextureBuffer;
};

//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex: TEXCOORD0;
	float3 normal : NORMAL;
	float3 viewDirection : TEXCOORD1;
	float3 tangent : TANGENT;
    float3 binormal : BINORMAL;
	float3 diffuseLookUp : TEXCOORD2;
};

//////////////
// CLASSES //
//////////////
float3 GetNormalValue(float4 normalMap, float3 tangent, float3 binormal, float3 normal);
float GetRoughness(float roughnessMap, float roughness);
float GetMetalness(float metalnessMap, float metalness);

float GeometrySchlickGGX(float NdotV, float k);
float GeometrySmithGGX(float roughness, float NdotV, float NdotL);
float NormalDistributionFunction(float3 halfV, float roughness, float PI, float NdotH);
float FresnelSchlick(float3 F0, float3 albedo, float metalness, float NdotV, float exp);
float3 FresnelSchlickRoughness(float NdotV, float3 F0, float roughness);

float3 GetPrefilteredColor(float roughness, float3 R);

//////////////////
// CONST VALUES //
//////////////////
static const float PI = 3.14159265359;

////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 ColorPixelShader(PixelInputType input) : SV_TARGET
{
//Calculated values
	float specular;
	float3 normal;
	float lightIntensity;
	float3 lightDir = normalize(g_direction);
	float4 normalMap;
	float roughnessMap;
	float metalnessMap;

//PBR parameters
	float roughness;
	float metalness;
	float3 albedo;

//Load texture data
	albedo = shaderTexture[0].Sample(SampleType, input.tex);
	normalMap = shaderTexture[1].Sample(SampleType, input.tex);
	roughnessMap = shaderTexture[2].Sample(SampleType, input.tex);
	metalnessMap = shaderTexture[3].Sample(SampleType, input.tex);

//Calculate normal for model
	normal = GetNormalValue(normalMap, input.tangent, input.binormal, input.normal);

//Calculate other PBR values
	roughness = GetRoughness(roughnessMap, g_roughness);
	metalness = GetMetalness(metalnessMap, g_metalness);

//Light intensity - currently used, may be disabled in future[?]
	lightIntensity = saturate(dot(normal, lightDir));	
	
//Helper values
	float3 halfV = (input.viewDirection + lightDir) / (length(lightDir + input.viewDirection));
	float NdotH = max(dot(normal, halfV), 0.0);
	float NdotV = max(dot(normal, input.viewDirection), 0.0);
	float NdotL = max(dot(normal, lightDir), 0.0);

//NORMAL DISTRUBUTION FUNCTION
	float D = NormalDistributionFunction(halfV, roughness, PI, NdotH);
//////////////////////////////

//GEOMETRY FUNCTION
	float G = GeometrySmithGGX(roughness, NdotV, NdotL);
///////////////////

//FRESNEL EQUATION
	float3 F0 = float3(0.04, 0.04, 0.04);
	float F = FresnelSchlick(F0, albedo, metalness, NdotV, 5.0);
/////////////////

//SPECULAR IBL	
	float3 R = reflect(-input.viewDirection, input.normal);
	float3 prefilteredColor = GetPrefilteredColor(roughness, R);
	float2 enviroBRDF = specularLUT.Sample(SampleType, float2(max(NdotV, 0.0f), max(NdotV, 0.0f))).rg;

//DIFFUSE IRRADIANCE
	float3 irradiance = irradianceMap.Sample(SampleType, GetNormalValue(normalMap, input.tangent, input.binormal, input.diffuseLookUp)).rgb;
	float3 diffuse = irradiance * albedo;
	//float3 ambient = 0.03 * albedo;

//FINAL CALCULATIONS
	float3 numerator = D * G * F;
	float denominator = 4.0 * max(NdotV, 0.0) * max(NdotL, 0.0);
	specular = numerator / max(denominator, 0.001);

	float3 kS = FresnelSchlickRoughness(max(NdotV, 0.0), F0, roughness);
	float3 kD = float3(1.0, 1.0, 1.0) - kS;
	kD *= (1.0 - metalness);

	float3 Lo = (kD * albedo / PI + specular) * NdotL;
	specular =  prefilteredColor * (kS * enviroBRDF.x + enviroBRDF.y);
	float3 ambient = (kD * diffuse + specular);// * ao;

//GAMMA CORRECTION
	float3 tempColor = (ambient + Lo);
	tempColor = tempColor / (tempColor + float3(1.0, 1.0, 1.0));
	tempColor = pow(tempColor, float3(1.0/2.2, 1.0/2.2, 1.0/2.2)); 
	float4 finalColor = float4(tempColor, 1.0);

	//return float4(kD * diffuse + specular, 1.0f) * g_lightStrength;//*lightIntensity;
	return finalColor * g_lightStrength;// * lightIntensity;
	//return float4(irradiance, 1.0);
}

float GeometrySchlickGGX(float NdotV, float k)
{
    float nom   = NdotV;
    float denom = NdotV * (1.0 - k) + k;
	
    return nom / denom;
}

float NormalDistributionFunction(float3 halfV, float roughness, float PI, float NdotH)
{
	float a2 = max(roughness * roughness, 0.001);
	float denom = 1.0 + NdotH * NdotH * (a2 - 1.0);
	denom = denom * denom;
	denom = denom * PI;
	
	return a2 / denom;
}

float GeometrySmithGGX(float roughness, float NdotV, float NdotL)
{
	float k = (roughness + 1);
	k = (k * k) / 8;
    float ggx1 = GeometrySchlickGGX(NdotV, k);
    float ggx2 = GeometrySchlickGGX(NdotL, k);

	return ggx1 * ggx2;
}

float FresnelSchlick(float3 F0, float3 albedo, float metalness, float NdotV, float exp)
{
	F0 = lerp(F0, albedo, metalness);

	return F0 + (1.0 - F0) * pow((1.0 - NdotV), exp);
}

float3 FresnelSchlickRoughness(float NdotV, float3 F0, float roughness)
{
    return F0 + (max(float3(1.0 - roughness, 1.0 - roughness, 1.0 - roughness), F0) - F0) * pow(1.0 - NdotV, 5.0);
}   

////////////////////////////////////////////////////////////////////////////////
// GET TEXTURE PBR VALUES
////////////////////////////////////////////////////////////////////////////////
float3 GetNormalValue(float4 normalMap, float3 tangent, float3 binormal, float3 normal)
{
	[branch] if(g_hasNormalMap)
	{
		normalMap = (normalMap * 2.0f) - 1.0f; //Convert from [0, 1] to [-1, 1]
		normal = (normalMap.x * tangent) + (normalMap.y * binormal) + (normalMap.z * normal);
		return normalize(normal);
	}
	else
	{
		return normal;
	}
}

float GetRoughness(float roughnessMap, float roughness)
{
	[branch] if (g_hasRoughnessMap)
	{
		return roughnessMap;
	}
	else
	{
		return roughness;
	}
}

float GetMetalness(float metalnessMap, float metalness)
{
	[branch] if (g_hasMetalnessMap)
	{
		return metalnessMap;
	}
	else
	{
		return metalness;
	}
}
////////////////////////////////////////////////////////////
// OTHER CALCULATIONS
////////////////////////////////////////////////////////////
float3 GetPrefilteredColor(float roughness, float3 R)
{
	float3 color_0 = environmentMap[0].Sample(SampleType, R);
	float3 color_1 = environmentMap[1].Sample(SampleType, R);
	float3 color_2 = environmentMap[2].Sample(SampleType, R);
	float3 color_3 = environmentMap[3].Sample(SampleType, R);
	float3 color_4 = environmentMap[4].Sample(SampleType, R);

	float3 colors[5] = {color_0, color_1, color_2, color_3, color_4};
	int index = clamp(roughness * 5, 0, 4);
	float lerpVal = (roughness - index * 0.2f) / ((index + 1) * 0.2f - index * 0.2f);
	lerpVal = clamp(lerpVal, 0.0f, 1.0f);

	return lerp(colors[index], colors[clamp(index + 1, 0, 4)], lerpVal);
}