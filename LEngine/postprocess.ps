////////////////////////////////////////////////////////////////////////////////
// Filename: postprocess.ps
////////////////////////////////////////////////////////////////////////////////

Texture2D screenTexture;
Texture2D ssaoTexture;
Texture2D bloomTexture;
Texture2D lutTexture;
Texture2D chromaticTexture;
SamplerState SampleType;

struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex: TEXCOORD0;
};

cbuffer TextureBuffer
{
	float g_hasSSAO;
	float g_hasBloom;
	float g_hasLUT;
	float g_hasChromaticAberration;
};

cbuffer ChromaticAberrationOffsets
{
	float g_rOffset;
	float g_gOffset;
	float g_bOffset;
	float g_intensity;
};

////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 ColorPixelShader(PixelInputType input) : SV_TARGET
{
	float4 finalColor = screenTexture.Sample(SampleType, input.tex);

	//AMBIENT OCCLUSION
	[branch] if (g_hasSSAO > 0)
	{
		float ao = ssaoTexture.Sample(SampleType, input.tex);
		finalColor *= ao;
	}
	
	//LUT
	[branch] if (g_hasLUT > 0)
	{
		float4 lut = finalColor;
		float2 lutTex;

		lutTex.x = lut.r * 0.0625f; //RED
		lutTex.y = lut.g; //GREEN
		lutTex.x += (floor(lut.b * 16.0f)) * 0.0625f; //BLUE

		finalColor = lutTexture.Sample(SampleType, lutTex);
		//finalColor = float4(0.0f, saturate(lutTex.y), 0.0f, 1.0f);
	}

	//BLOOM
	float4 bloom = bloomTexture.Sample(SampleType, input.tex);
	finalColor += (bloom * g_hasBloom);
	//finalColor.xyz = pow(finalColor.xyz, float3(1.0f / 2.2f)); //gamma correction

	//CHROMATIC ABERRATION
	[branch] if (g_hasChromaticAberration > 0)
	{
		float rValue = screenTexture.Sample(SampleType, input.tex - g_rOffset).r;
		float gValue = screenTexture.Sample(SampleType, input.tex - g_gOffset).g;
		float bValue = screenTexture.Sample(SampleType, input.tex - g_bOffset).b;

		float4 chromatic = float4(rValue, gValue, bValue, 1.0f) - screenTexture.Sample(SampleType, input.tex);
		float intensity = chromaticTexture.Sample(SampleType, input.tex).r * g_intensity;
		chromatic *= intensity;
		finalColor += chromatic;
		//finalColor = chromatic;
		//finalColor = float4(rValue, gValue, bValue, 1.0f);
	}

	return finalColor;
}